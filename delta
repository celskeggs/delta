#!/bin/python3
import os
import sys
import crypto
import upstream
import tree
import common
import inspect

commands = {}


def count_args(command):
    optional = 0
    required = 0
    for p in inspect.signature(command).parameters.values():
        if p.kind in (inspect.Parameter.POSITIONAL_ONLY, inspect.Parameter.POSITIONAL_OR_KEYWORD):
            optional += 1
            if p.default is inspect.Parameter.empty:
                required += 1
    return required, optional + required


def add_command(command):
    name = command.__name__
    min_args, max_args = count_args(command)

    def checked(args):
        args = args[1:]
        if len(args) < min_args:
            raise common.DeltaException("Too few arguments to %s." % name)
        elif max_args is not None and len(args) > max_args:
            raise common.DeltaException("Too many arguments to %s." % name)
        else:
            return command(*args)

    commands[name] = checked


def no_such_command(args):
    raise common.DeltaException("Unknown command: %s" % args[0])


# Commands

@add_command
def init(key_n=None):
    if tree.find_ctx(fail=False) is not None:
        raise common.DeltaException("delta root already created.")
    if key_n is None:
        print("Key expected. Key options:")
        for i, key in enumerate(crypto.list_keys()):
            print("(%d) =>" % i, key["fingerprint"], key["trust"], key["length"], *key["uids"])
        print("Try again with the number.")
    else:
        keys = crypto.list_keys()
        try:
            key = keys[int(key_n)]["fingerprint"]
        except ValueError:
            raise common.DeltaException("Invalid number.")
        except IndexError:
            raise common.DeltaException("Key number not available.")
        tree.init_folder(os.getcwd(), key)
        print("Repo inited with key", key)


@add_command
def stash():
    root, ddir, key = tree.find_ctx()
    print("Delta root:", root)
    link_count, unsaved = tree.tree_status(root)
    if unsaved:
        for f in unsaved:
            tree.stash_file(root, f)
        print("Done stashing!")
    else:
        print("Nothing to stash.")


@add_command
def status():
    root, ddir, key = tree.find_ctx()
    print("Delta root:", root)
    print("Encryption key:", key)
    link_count, unsaved = tree.tree_status(root)
    cache = tree.cache_status(root)
    print("Object count:   ", len(cache))
    print("Stashed count:  ", link_count, ("\t+%d" % len(unsaved)) if unsaved else "")
    for f in unsaved:
        rel = os.path.relpath(f)
        print("\t%s" % (rel if rel[0:3] == "../" else "./" + rel,))


@add_command
def sync():
    root, ddir, key = tree.find_ctx()
    print("Delta root:", root)
    loaded_tree = tree.get_tree(root)
    if loaded_tree != None:
        changes = list(tree.list_changes(root, loaded_tree))
        print("Found %d changes." % len(changes))
        if changes:
            for i, change in enumerate(changes, 1):
                print("%3d." % i, *change)
                if input("Apply change? ")[0:1].lower() == "y":
                    tree.apply_change(root, change)
                    print("Applied.")
            print("Finished changes.")
    if tree.get_tree(root) != tree.dump_tree(root) and input("Store tree? ")[0:1].lower() == "y":
        tree.set_tree(root, tree.dump_tree(root))
        print("Stored.")


@add_command
def up():
    root, ddir, key = tree.find_ctx()
    objects_upstream = upstream.list_upstream()
    objects_local = tree.cache_status(root)
    objects_to_upload = [object for object in objects_local if object not in objects_upstream]
    print("Going to upload %d objects." % len(objects_to_upload))
    for object in objects_to_upload:
        with tree.export_object(root, object) as f:
            print("Uploading:", object)
            upstream.upload_object(object, f, key)
    print("Uploading tree...")
    upstream.upload_object(tree.TREEFILE, tree.get_tree_flat(root), key, overwrite=True)
    print("Uploaded!")


@add_command
def down():
    root, ddir, key = tree.find_ctx()
    objects_upstream = upstream.list_upstream()
    objects_local = tree.cache_status(root)
    objects_to_download = [object for object in objects_upstream if object not in objects_local]
    print("Going to download %d objects." % len(objects_to_download))
    for object in objects_to_download:
        print("Downloading:", object)
        upstream.download_object(object, key, tree.import_object_path(root, object))
    print("Downloading tree...")
    if upstream.exists_object(tree.TREEFILE):
        tree.set_tree_flat(root, upstream.download_object(tree.TREEFILE, key))
        print("Downloaded!")
    else:
        print("No tree to download.")


@add_command
def help():
    print("Commands:", *sorted(commands.keys()))


# Main

if __name__ == "__main__":
    try:
        commands.get(sys.argv[1] if sys.argv[1:] else "status", no_such_command)(sys.argv[1:])
    except common.DeltaException as e:
        print("Failed:", str(e))
