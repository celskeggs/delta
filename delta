#!/bin/python3
import os
import sys
import tree
import remote
from tree import DeltaException, list_keys, find_ctx, tree_status, cache_status, stash_file, encrypt_file, decrypt_file, init_folder

# Commands

def init(args):
	if find_ctx(fail=False) is not None:
		raise DeltaException("delta root already created.")
	keys = list_keys(True)
	keys.sort(key=lambda x: x["fingerprint"])
	if len(args) == 0:
		if len(keys) == 0:
			raise DeltaException("No keys available.")
		print("Key expected. Key options:")
		for i, key in enumerate(keys):
			print("(%d) =>" % i, key["fingerprint"], key["trust"], key["length"], *key["uids"])
		print("Try again with the number.")
		return
	try:
		index = int(args[0])
	except ValueError:
		raise DeltaException("Invalid number.")
	if index < 0 or index >= len(keys):
		raise DeltaException("Key number not available.")
	key = keys[index]["fingerprint"]
	print("Using key", key)
	init_folder(os.getcwd(), key)
	print("Repo inited.")

def stash(args):
	root, ddir, key = find_ctx()
	print("Delta root:", root)
	link_count, unsaved = tree_status(root)
	if unsaved:
		for f in unsaved:
			stash_file(root, f)
		print("Done stashing!")
	else:
		print("Nothing to stash.")

def encrypt(args):
	root, ddir, key = find_ctx()
	print("Delta root:", root)
	cache_decrypt, cache_encrypt = cache_status(root)
	found_any = False
	for object in cache_decrypt:
		if object not in cache_encrypt:
			found_any = True
			encrypt_file(root, key, object)
	if found_any:
		print("Done encrypting!")
	else:
		print("Nothing to encrypt.")

def decrypt(args):
	root, ddir, key = find_ctx()
	print("Delta root:", root)
	cache_decrypt, cache_encrypt = cache_status(root)
	found_any = False
	for object in cache_encrypt:
		if object not in cache_decrypt:
			found_any = True
			decrypt_file(root, key, object)
	if found_any:
		print("Done decrypting!")
	else:
		print("Nothing to decrypt.")

def status(args):
	root, ddir, key = find_ctx()
	print("Delta root:", root)
	print("Encryption key:", key)
	link_count, unsaved = tree_status(root)
	cache_decrypt, cache_encrypt = cache_status(root)
	cache_needs_encrypt = len([x for x in cache_decrypt if x not in cache_encrypt])
	cache_needs_decrypt = len([x for x in cache_encrypt if x not in cache_decrypt])
	print("Object count:   ", len(cache_decrypt), ("\t+%d" % cache_needs_decrypt) if cache_needs_decrypt else "")
	print("Encrypted count:", len(cache_encrypt), ("\t+%d" % cache_needs_encrypt) if cache_needs_encrypt else "")
	print("Stashed count:  ", link_count, ("\t+%d" % len(unsaved)) if unsaved else "")
	for f in unsaved:
		rel = os.path.relpath(f)
		print("\t%s" % (rel if rel[0:3] == "../" else "./" + rel,))

def sync(args):
	root, ddir, key = find_ctx()
	print("Delta root:", root)
	loaded_tree = tree.get_tree(root)
	if loaded_tree != None:
		changes = list(tree.list_changes(root, loaded_tree))
		print("Found %d changes." % len(changes))
		if changes:
			for i, change in enumerate(changes, 1):
				print("%3d." % i, *change)
				if input("Apply change? ")[0:1].lower() == "y":
					tree.apply_change(root, change)
					print("Applied.")
			print("Finished changes.")
	if tree.get_tree(root) != tree.dump_tree(root) and input("Store tree? ")[0:1].lower() == "y":
		tree.set_tree(root, tree.dump_tree(root))
		print("Stored.")

def up(args):
	root, ddir, key = find_ctx()
	objects_upstream = remote.list_upstream()
	objects_local = tree.cache_status(root)[1]
	objects_to_upload = [object for object in objects_local if object not in objects_upstream]
	print("Going to upload %d objects." % len(objects_to_upload))
	for object in objects_to_upload:
		with tree.export_object(root, object) as f:
			print("Uploading:", object)
			remote.upload_object(object, f)
	print("Uploading tree...")
	data = tree.get_tree_crypt(root, key)
	remote.upload_object(tree.TREEFILE, data, overwrite=True)
	print("Uploaded!")

def down(args):
	root, ddir, key = find_ctx()
	objects_upstream = remote.list_upstream()
	objects_local = tree.cache_status(root)[1]
	objects_to_download = [object for object in objects_upstream if object not in objects_local]
	print("Going to download %d objects." % len(objects_to_download))
	for object in objects_to_download:
		with tree.import_object(root, object) as f:
			print("Downloading:", object)
			remote.download_object(object, f)
	print("Downloading tree...")
	if remote.exists_object(tree.TREEFILE):
		tree.set_tree_crypt(root, key, remote.download_object(tree.TREEFILE, None))
		print("Downloaded!")
	else:
		print("No tree to download.")

# Main

if __name__ == "__main__":
	try:
		if len(sys.argv) < 2:
			status([])
		elif sys.argv[1] == "init":
			init(sys.argv[2:])
		elif sys.argv[1] == "status":
			status(sys.argv[2:])
		elif sys.argv[1] == "stash":
			stash(sys.argv[2:])
		elif sys.argv[1] == "encrypt":
			encrypt(sys.argv[2:])
		elif sys.argv[1] == "decrypt":
			decrypt(sys.argv[2:])
		elif sys.argv[1] == "sync":
			sync(sys.argv[2:])
		elif sys.argv[1] == "up":
			up(sys.argv[2:])
		elif sys.argv[1] == "down":
			down(sys.argv[2:])
		elif sys.argv[1] == "help":
			print("Commands: init status stash encrypt decrypt sync up down")
		else:
			print("Unknown command %s" % sys.argv[1], file=sys.stderr)
			sys.exit(1)
	except DeltaException as e:
		print("Failed:", str(e))
